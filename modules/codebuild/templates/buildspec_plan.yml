#This solution, non-production-ready template describes AWS Codepipeline based CICD Pipeline for terraform code deployment.
#Â© 2023 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
#This AWS Content is provided subject to the terms of the AWS Customer Agreement available at
#http://aws.amazon.com/agreement or other written agreement between Customer and either
#Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.

version: 0.2

env:
  variables:
    CODE_SRC_DIR: "."

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - "curl -s -qL -o terraform.zip https://releases.hashicorp.com/terraform/${terraform_version}/terraform_${terraform_version}_linux_amd64.zip"
      - "unzip -o terraform.zip"
      - "mv terraform /bin"
      - "rm terraform.zip"
  build:
    commands:
      - "cd $${CODEBUILD_SRC_DIR}/$${CODE_SRC_DIR}"
      - "echo ## TERRAFORM PLAN : Generate the Terraform Plan"
      - export PIPELINE_ID=$(aws codepipeline get-pipeline-state --region $${AWS_REGION} --name ${pipeline_name} --query 'stageStates[?actionStates[?latestExecution.externalExecutionId==`'$${CODEBUILD_BUILD_ID}'`]].latestExecution.pipelineExecutionId' --output text)
      - "terraform plan -out tfapply | grep -q 'No changes.' && aws codepipeline stop-pipeline-execution --pipeline-name ${pipeline_name} --pipeline-execution-id $PIPELINE_ID --abandon"
artifacts:
  files:
    - '**/*'
